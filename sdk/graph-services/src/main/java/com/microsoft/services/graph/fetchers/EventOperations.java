/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Corporation. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.graph.fetchers;

import com.microsoft.services.graph.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.http.*;
import static com.microsoft.services.orc.core.Helpers.*;
import com.microsoft.services.orc.serialization.JsonSerializer;

/**
 * The type EventOperations.
* @deprecated This SDK is deprecated. Please review the README for further information (https://github.com/OfficeDev/Microsoft-Graph-SDK-Android).
 */
@Deprecated
public class EventOperations extends OutlookItemOperations {

     /**
      * Instantiates a new EventOperations.
      *
      * @param urlComponent the url component
      * @param parent the parent
      */
    public EventOperations(String urlComponent, OrcExecutable parent) {
            super(urlComponent, parent);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public EventOperations addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public EventOperations addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    
    /**
     * accept listenable future.
     * @param comment the comment @param sendResponse the sendResponse 
     * @return the listenable future
     */         
    public ListenableFuture<Integer> accept(String comment, Boolean sendResponse) { 
        
		JsonSerializer serializer = getResolver().getJsonSerializer();      
        
		String serializedComment = serializer.serialize(comment);
		String serializedSendResponse = serializer.serialize(sendResponse);
		  
        
		
		ListenableFuture<String> future = acceptRaw(serializedComment, serializedSendResponse);
		return transformToEntityListenableFuture(future, Integer.class, getResolver());
        
    }

     /**
     * acceptRaw listenable future.
     * @param comment the comment @param sendResponse the sendResponse 
     * @return the listenable future
     */ 
    public ListenableFuture<String> acceptRaw(String comment, String sendResponse){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("Comment", comment);
		map.put("SendResponse", sendResponse);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("microsoft.graph.accept");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * decline listenable future.
     * @param comment the comment @param sendResponse the sendResponse 
     * @return the listenable future
     */         
    public ListenableFuture<Integer> decline(String comment, Boolean sendResponse) { 
        
		JsonSerializer serializer = getResolver().getJsonSerializer();      
        
		String serializedComment = serializer.serialize(comment);
		String serializedSendResponse = serializer.serialize(sendResponse);
		  
        
		
		ListenableFuture<String> future = declineRaw(serializedComment, serializedSendResponse);
		return transformToEntityListenableFuture(future, Integer.class, getResolver());
        
    }

     /**
     * declineRaw listenable future.
     * @param comment the comment @param sendResponse the sendResponse 
     * @return the listenable future
     */ 
    public ListenableFuture<String> declineRaw(String comment, String sendResponse){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("Comment", comment);
		map.put("SendResponse", sendResponse);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("microsoft.graph.decline");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * tentativelyAccept listenable future.
     * @param comment the comment @param sendResponse the sendResponse 
     * @return the listenable future
     */         
    public ListenableFuture<Integer> tentativelyAccept(String comment, Boolean sendResponse) { 
        
		JsonSerializer serializer = getResolver().getJsonSerializer();      
        
		String serializedComment = serializer.serialize(comment);
		String serializedSendResponse = serializer.serialize(sendResponse);
		  
        
		
		ListenableFuture<String> future = tentativelyAcceptRaw(serializedComment, serializedSendResponse);
		return transformToEntityListenableFuture(future, Integer.class, getResolver());
        
    }

     /**
     * tentativelyAcceptRaw listenable future.
     * @param comment the comment @param sendResponse the sendResponse 
     * @return the listenable future
     */ 
    public ListenableFuture<String> tentativelyAcceptRaw(String comment, String sendResponse){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("Comment", comment);
		map.put("SendResponse", sendResponse);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("microsoft.graph.tentativelyAccept");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * snoozeReminder listenable future.
     * @param newReminderTime the newReminderTime 
     * @return the listenable future
     */         
    public ListenableFuture<Integer> snoozeReminder(DateTimeTimeZone newReminderTime) { 
        
		JsonSerializer serializer = getResolver().getJsonSerializer();      
        
		String serializedNewReminderTime = serializer.serialize(newReminderTime);
		  
        
		
		ListenableFuture<String> future = snoozeReminderRaw(serializedNewReminderTime);
		return transformToEntityListenableFuture(future, Integer.class, getResolver());
        
    }

     /**
     * snoozeReminderRaw listenable future.
     * @param newReminderTime the newReminderTime 
     * @return the listenable future
     */ 
    public ListenableFuture<String> snoozeReminderRaw(String newReminderTime){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("NewReminderTime", newReminderTime);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("microsoft.graph.snoozeReminder");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * dismissReminder listenable future.
     * 
     * @return the listenable future
     */         
    public ListenableFuture<Integer> dismissReminder() { 
              
        
		  
        
		
		ListenableFuture<String> future = dismissReminderRaw();
		return transformToEntityListenableFuture(future, Integer.class, getResolver());
        
    }

     /**
     * dismissReminderRaw listenable future.
     * 
     * @return the listenable future
     */ 
    public ListenableFuture<String> dismissReminderRaw(){
        
        
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
                        
        request.getUrl().appendPathComponent("microsoft.graph.dismissReminder");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


}

/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.graph.fetchers;

import com.microsoft.services.graph.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.http.*;
import static com.microsoft.services.orc.core.Helpers.*;
import com.microsoft.services.orc.serialization.JsonSerializer;

/**
 * The type ConversationThreadOperations.
 */
public class ConversationThreadOperations extends EntityOperations {

     /**
      * Instantiates a new ConversationThreadOperations.
      *
      * @param urlComponent the url component
      * @param parent the parent
      */
    public ConversationThreadOperations(String urlComponent, OrcExecutable parent) {
            super(urlComponent, parent);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public ConversationThreadOperations addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public ConversationThreadOperations addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    
    /**
     * Reply listenable future.
     * @param post the post 
     * @return the listenable future
     */         
    public ListenableFuture<Integer> reply(Post post) { 
        
		JsonSerializer serializer = getResolver().getJsonSerializer();      
        
		String serializedPost = serializer.serialize(post);
		  
        
		
		ListenableFuture<String> future = replyRaw(serializedPost);
		return transformToEntityListenableFuture(future, Integer.class, getResolver());
        
    }

     /**
     * ReplyRaw listenable future.
     * @param post the post 
     * @return the listenable future
     */ 
    public ListenableFuture<String> replyRaw(String post){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("Post", post);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("microsoft.graph.Reply");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


}

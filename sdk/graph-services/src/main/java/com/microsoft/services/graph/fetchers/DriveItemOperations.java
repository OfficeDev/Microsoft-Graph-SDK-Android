/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.graph.fetchers;

import com.microsoft.services.graph.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.http.*;
import static com.microsoft.services.orc.core.Helpers.*;
import com.microsoft.services.orc.serialization.JsonSerializer;

/**
 * The type DriveItemOperations.
 */
public class DriveItemOperations extends EntityOperations {

     /**
      * Instantiates a new DriveItemOperations.
      *
      * @param urlComponent the url component
      * @param parent the parent
      */
    public DriveItemOperations(String urlComponent, OrcExecutable parent) {
            super(urlComponent, parent);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public DriveItemOperations addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public DriveItemOperations addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    
    /**
     * createLink listenable future.
     * @param type the type @param scope the scope 
     * @return the listenable future
     */         
    public ListenableFuture<Permission> createLink(String type, String scope) { 
        
		JsonSerializer serializer = getResolver().getJsonSerializer();      
        
		String serializedtype = serializer.serialize(type);
		String serializedscope = serializer.serialize(scope);
		  
        
		
		ListenableFuture<String> future = createLinkRaw(serializedtype, serializedscope);
		return transformToEntityListenableFuture(future, Permission.class, getResolver());
        
    }

     /**
     * createLinkRaw listenable future.
     * @param type the type @param scope the scope 
     * @return the listenable future
     */ 
    public ListenableFuture<String> createLinkRaw(String type, String scope){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("type", type);
		map.put("scope", scope);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("microsoft.graph.createLink");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
     /**
     * search listenable future.
     * @param q the q 
     * @return the listenable future
     */         
    public ListenableFuture<DriveItem> search(String q) { 
		
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
        map.put("q", q);
		

		Request request = getResolver().createRequest();
		request.setVerb(HttpVerb.GET);
		String parameters = getFunctionParameters(map);
        
		        
		request.getUrl().appendPathComponent("microsoft.graph.search(" + parameters + ")");   
        
		
		ListenableFuture<OrcResponse> future = oDataExecute(request);
		   
        
		return transformToEntityListenableFuture(transformToStringListenableFuture(future), DriveItem.class, getResolver());
        
        
   }
    
}
